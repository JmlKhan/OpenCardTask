// <auto-generated />
using System;
using Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240214061914_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Models.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Library.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Models.Book_Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BookID");

                    b.ToTable("Book_Authors");
                });

            modelBuilder.Entity("Library.Models.BorrowingRecord", b =>
                {
                    b.Property<int>("BorrowingRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowingRecordID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("BorrowingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Fine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ReturnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("BorrowingRecordID");

                    b.ToTable("BorrowingRecords");
                });

            modelBuilder.Entity("Library.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherID");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherID = 186057027,
                            Address = "3940 Maxine Estates, South Biankaton, Saudi Arabia",
                            ContactInfo = "similique",
                            Name = "Mr. Bridget Heidenreich"
                        },
                        new
                        {
                            PublisherID = 1358387376,
                            Address = "1687 Rogahn Shores, East Bridget, Dominican Republic",
                            ContactInfo = "velit",
                            Name = "Virgil Ullrich I"
                        },
                        new
                        {
                            PublisherID = 1297037168,
                            Address = "450 Malachi Knolls, Carsonshire, Turkmenistan",
                            ContactInfo = "numquam",
                            Name = "Austin Conn Sr."
                        },
                        new
                        {
                            PublisherID = 1618525778,
                            Address = "487 Prohaska Divide, Gloverfort, Dominica",
                            ContactInfo = "ipsum",
                            Name = "Jean Rath MD"
                        },
                        new
                        {
                            PublisherID = 510953556,
                            Address = "51040 Odie Junction, Hoegermouth, Iceland",
                            ContactInfo = "error",
                            Name = "Lewis Kub Jr."
                        },
                        new
                        {
                            PublisherID = 216533798,
                            Address = "37416 Jacobson Ford, Port Janessa, Lebanon",
                            ContactInfo = "vero",
                            Name = "Miss Bridget Jacobs"
                        },
                        new
                        {
                            PublisherID = 599614909,
                            Address = "082 Dietrich Villages, West Coletown, Kenya",
                            ContactInfo = "et",
                            Name = "Irving Fay IV"
                        },
                        new
                        {
                            PublisherID = 60879689,
                            Address = "314 Buckridge Skyway, Santoston, Mongolia",
                            ContactInfo = "dolores",
                            Name = "Jaime Bosco DDS"
                        },
                        new
                        {
                            PublisherID = 535545999,
                            Address = "0303 Legros Crossing, North Alyce, Cape Verde",
                            ContactInfo = "assumenda",
                            Name = "Edgar Bradtke Sr."
                        },
                        new
                        {
                            PublisherID = 908859332,
                            Address = "6376 Skiles Square, Sydniehaven, Tajikistan",
                            ContactInfo = "voluptatem",
                            Name = "Miss Marsha Padberg"
                        });
                });

            modelBuilder.Entity("Library.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentID = 649330134,
                            Address = "964 Olson Forges, North Ariel, Guernsey",
                            Email = "Jolie_Price61@gmail.com",
                            Name = "Jolie"
                        },
                        new
                        {
                            StudentID = 703229907,
                            Address = "41166 Beer Green, South Berta, Nepal",
                            Email = "Bart_Lynch@hotmail.com",
                            Name = "Bart"
                        },
                        new
                        {
                            StudentID = 1273409234,
                            Address = "183 Levi Glens, Leuschkechester, Mozambique",
                            Email = "Kailey83@hotmail.com",
                            Name = "Kailey"
                        },
                        new
                        {
                            StudentID = 2001296433,
                            Address = "43943 Araceli Grove, Estrellamouth, Timor-Leste",
                            Email = "Meredith50@yahoo.com",
                            Name = "Meredith"
                        },
                        new
                        {
                            StudentID = 1592058934,
                            Address = "712 Zulauf Terrace, Clarissaside, Gibraltar",
                            Email = "Jennie_Brown@hotmail.com",
                            Name = "Jennie"
                        },
                        new
                        {
                            StudentID = 995126933,
                            Address = "756 Rempel Walk, Adamsport, Cameroon",
                            Email = "Caitlyn65@hotmail.com",
                            Name = "Caitlyn"
                        },
                        new
                        {
                            StudentID = 902293180,
                            Address = "71123 Zulauf Roads, Corkerystad, Senegal",
                            Email = "Deshaun.Deckow@yahoo.com",
                            Name = "Deshaun"
                        },
                        new
                        {
                            StudentID = 1951741350,
                            Address = "77127 Natasha Divide, Lake Brenda, Vanuatu",
                            Email = "Trevor69@hotmail.com",
                            Name = "Trevor"
                        },
                        new
                        {
                            StudentID = 1026195953,
                            Address = "917 Keely Islands, Luisaburgh, Oman",
                            Email = "Leland.Lemke16@hotmail.com",
                            Name = "Leland"
                        },
                        new
                        {
                            StudentID = 1885394238,
                            Address = "05309 Effertz Fork, Hilpertburgh, Guatemala",
                            Email = "Gregoria23@hotmail.com",
                            Name = "Gregoria"
                        },
                        new
                        {
                            StudentID = 592055310,
                            Address = "66536 Myrtice Club, Lake Armando, Honduras",
                            Email = "Gisselle.Kling@hotmail.com",
                            Name = "Gisselle"
                        },
                        new
                        {
                            StudentID = 317271775,
                            Address = "769 Catalina Tunnel, West Chauncey, Cook Islands",
                            Email = "Avery.McCullough@yahoo.com",
                            Name = "Avery"
                        },
                        new
                        {
                            StudentID = 1284904246,
                            Address = "96687 Hammes Viaduct, South Kaceyview, Georgia",
                            Email = "Verda9@hotmail.com",
                            Name = "Verda"
                        },
                        new
                        {
                            StudentID = 2045646957,
                            Address = "53304 Josh Cliffs, Bradtkeport, South Africa",
                            Email = "Myrtie12@hotmail.com",
                            Name = "Myrtie"
                        },
                        new
                        {
                            StudentID = 170213284,
                            Address = "817 Margie Overpass, Coltenshire, Solomon Islands",
                            Email = "Karolann_Johnston98@hotmail.com",
                            Name = "Karolann"
                        },
                        new
                        {
                            StudentID = 1138232414,
                            Address = "386 Brook Loaf, Rafaelview, Tanzania",
                            Email = "Alisa.Hamill@gmail.com",
                            Name = "Alisa"
                        },
                        new
                        {
                            StudentID = 1467749207,
                            Address = "48838 Ruthie Mission, Altafort, Portugal",
                            Email = "Cory1@gmail.com",
                            Name = "Cory"
                        },
                        new
                        {
                            StudentID = 787100287,
                            Address = "59782 Schamberger Lock, South Brooks, Jordan",
                            Email = "Elian92@yahoo.com",
                            Name = "Elian"
                        },
                        new
                        {
                            StudentID = 701810709,
                            Address = "59611 Gleason Lake, Blockstad, Holy See (Vatican City State)",
                            Email = "Yesenia.Bauch55@hotmail.com",
                            Name = "Yesenia"
                        },
                        new
                        {
                            StudentID = 75006683,
                            Address = "98966 Hermiston Spurs, Mckenzieshire, India",
                            Email = "Timmothy_Kohler94@gmail.com",
                            Name = "Timmothy"
                        });
                });

            modelBuilder.Entity("Library.Models.Book", b =>
                {
                    b.HasOne("Library.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Library.Models.Book_Author", b =>
                {
                    b.HasOne("Library.Models.Author", "Author")
                        .WithMany("Book_Authors")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.Book", "Book")
                        .WithMany("Book_Authors")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Library.Models.Author", b =>
                {
                    b.Navigation("Book_Authors");
                });

            modelBuilder.Entity("Library.Models.Book", b =>
                {
                    b.Navigation("Book_Authors");
                });
#pragma warning restore 612, 618
        }
    }
}
